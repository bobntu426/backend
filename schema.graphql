type Query {
    getPeople(gender:Gender,accountId:Int):[Person]
    getRankSingleData(minimum:Int,maximum:Int,gender:Gender,name:String,rank:Int,school:String):[Person]
    getRankDoubleData(minimum:Int,maximum:Int,gender:Gender):[Double]
    getPersonById(id:Int):Person
    getCount(gender:Gender,type:NumberType):Int
    getEvent(state:EventState,name:String,schoolId:Int,eventId:Int,accountId:Int):[Event]
    getEventNum(state:EventState):Int
    getSchool(mustHasEvent:Boolean,id:Int,accountId:Int):[School]
    getSchoolNum(mustHasEvent:Boolean):Int
    getAdministratorById(id:Int):Administrator
}

type Mutation {
    deleteAllPeople:String
    deleteAllEvent:String
    deleteAllDouble:String
    deleteAllSchool:String
    checkPassword(name:String,password:String): CheckPassword
    createPerson(name:String,schoolId:Int,gender:Gender,hand:String,playType:String,birthday:String):String
}

type Person{
    name: String
    score: Int
    gender: Gender
    school: String
    playType: String
    hand: String
    age: String
    id: Int
    popular: Int
    record:[String]
    rank: Int
    identity: Identity
    password:String
}
type Administrator{
    name: String
    id: Int
    password:String
}

type Event{
    name: String
    date: String
    location: String
    host: String
    info: String
    id: Int
    state: EventState
    result: ResultType
    age: Int
    schoolId: Int 
}

type Double{
    player: [Person]
    score: String
    gender: String
    id: Int
    rank: Int
    school:String
}
type School{
    name:String
    eventName:String
    id:Int
    record:[String]
}

type ResultType{
    manGroup:ResultRank
    womanGroup:ResultRank
    manSingle:ResultRank
    womanSingle:ResultRank
    manDouble:ResultRank
    womanDouble:ResultRank
    mixDouble:ResultRank
}
type CheckPassword{
    success:Boolean
    name:String
}
enum EventState{
    finish
    live
    coming
}

type ResultRank{
    first:String
    second:String
    third:[String]
    fourth:String
}



enum Gender{
    male
    female
    mix
}

enum NumberType{
    single
    double
    group
}
enum Identity{
    user
    administrator
}


