type Query {
    getPeople(gender:Gender):[Person]
    getRankSingleData(minimum:Int,maximum:Int,gender:Gender,name:String,rank:Int,school:String):[Person]
    getRankDoubleData(minimum:Int,maximum:Int,gender:Gender):[Double]
    getPersonById(id:Int):Person
    getEventById(id:Int):Event
    getCount(gender:Gender,type:NumberType):Int
    getEvent(state:EventState):[Event]
    getEventNum(state:EventState):Int
}

type Mutation {
    deleteAllPeople:String
    deleteAllEvent:String
    deleteAllDouble:String
}

type Person{
    name: String
    score: Int
    gender: Gender
    school: String
    playType: String
    hand: String
    age: String
    id: Int
    popular: Int
    record:[String]
    rank: Int
}

type Event{
    name: String
    date: String
    location: String
    host: String
    info: String
    id: Int
    state: EventState
    result: ResultType
}

type Double{
    player: [Person]
    score: String
    gender: String
    id: Int
    rank: Int
    school:String
}


type ResultType{
    manGroup:ResultRank
    womanGroup:ResultRank
    manSingle:ResultRank
    womanSingle:ResultRank
    manDouble:ResultRank
    womanDouble:ResultRank
    mixDouble:ResultRank
}
enum EventState{
    finish
    live
    coming
}

type ResultRank{
    first:String
    second:String
    third:[String]
    fourth:String
}



enum Gender{
    male
    female
    mix
}

enum NumberType{
    single
    double
    group
}

